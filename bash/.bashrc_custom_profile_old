# .bash_profile

# If not running interactively, don't do anything
if [[ $- != *i* ]]; then return; fi

# User specific environment and startup programs

#export PATH="/corp/global/tools/bin/:.:/c/Tools/bin:~/utils/bin:~/utils/tools:$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/rational/local/bin:/usr/atria/bin/"
#export PATH="/c/Tools/bin:~/utils/bin:~/utils/tools:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/rational/local/bin:/usr/atria/bin/:.:$PATH:/corp/global/tools/bin"
# Add local tools to main path
export PATH="$PATH:~/utils/bin:~/utils/tools"
#export PATH="~/utils/bin:~/utils/tools:$PATH"
#export MANPATH=${MANPATH}:/usr/local/man
#export LD_LIBRARY_PATH=/usr/lib:/usr/local/lib:${HOME}/utils/lib

#export GZIP=-9

# Ctags Settings
alias tags='ctags -R -f tags '
alias atags='ctags -R --c++-kinds=+p --fields=+iaS --extra=+q -f atags '
function utags(){
    if  [[ -n $1  ]] ; then (cd $1; ctags -R --c++-kinds=+p --fields=+iaS --extra=+q -f atags;);  return ; fi
}

# Vim Settings
alias v="vim"
alias vi="vim"
alias vd="vimdiff"

# grep settings
alias grep='grep -sE '
alias grepc='grep -sE --color=always '
#alias xgrep='parallel -j4 grep -sE --color=always '
alias xgrep='xargs grep -sE '
alias xgrepc='xargs grep -sE --color=always '
function _f(){ p=$1; shift; find $p -type f $* ; set glob; };
alias f="set noglob; _f"
alias h=history

# ls settings
alias ls="ls --color=auto -p"
alias ll="ls -l"
alias la="ls -al"
alias ltr="ls -ltr"
alias l="ls --color=auto --format=horizontal -XF "


alias ct="cleartool"
alias kgn="kg --nocache "

#Language Settings
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

function VGtags()
{
	#echo vim -c ":Gtags $1 $2"
	if [[ $# -le  1 ]]
	then
		return
	fi
	file=$2
	if [[ $1 = "p" ]] 
	then
		declare -a filename_lineno=($(echo $2 | tr "[: ]" " "))
		file="${filename_lineno[0]}"
	fi
	
	:> ~/.vim/tmp/vfiles.txt
	vim -c ":call Gtags_$1(\"$file\")"
	. ~/.vim/tmp/vfiles.txt
}
function DiffFiles()
{
	dir1="$1"
	dir2="$2"
	shift
	shift
	#echo vim -c ":call DirTreeDiffView(\"$dir1\", \"$dir2\", \"$@\")"
	#read a
	vim -c ":call DirTreeDiffView(\"$dir1\", \"$dir2\", \"$@\")"

}

function vk()
{
	args=$@
	declare -a filename_lineno=($(echo $args | tr "[: ]" " "))
	filename="${filename_lineno[0]}"
	lineno="${filename_lineno[1]}"
	if [[ -n "$lineno" ]]
	then
		lineno="+$lineno"
	else
		lineno="${filename_lineno[1]} ${filename_lineno[2]} ${filename_lineno[3]}  ${filename_lineno[4]}"
	fi
	#echo vim $filename  $lineno
	vim $filename  $lineno
}



alias p="VGtags p"
alias x="VGtags x"
alias cx="VGtags cx"
alias d="VGtags dx"
alias c="VGtags c"
alias r="VGtags r"
alias s="VGtags s"
alias g="VGtags g"
alias DIFF="DiffFiles "

alias getp="global -P "
alias getx="global -x "
alias getc="global -c "
alias getr="global -rx "
alias gets="global -s "
alias getg="global -gx "

_x() 
{
    local cur prev opts
	if [[ $COMP_CWORD -ne 1 ]]; 
	then
		return 0
	fi
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
	opts="$(echo "$(global -xc  $2)" | tr "\n" " " )"
	#echo "[$2:$cur:$prev][$opts]"

	if [[ ${cur} == * ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" ${cur}) )
        return 0
    fi
}
complete -F _x x
complete -F _x getx

_r() 
{
    local cur prev opts
	if [[ $COMP_CWORD -ne 1 ]]; 
	then
		return 0
	fi
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
	opts="$(echo "$(global -rc  $2)" | tr "\n" " " )"
	#echo "[$2 $cur $prev][$opts]"

    if [[ ${cur} == * ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _r r
complete -F _r getr


_p() 
{
    local cur prev opts
	if [[ $COMP_CWORD -ne 1 ]]; 
	then
		return 0
	fi
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
	opts="$(echo "$(global -Poc  $2)" | tr "\n" " " )"
	#echo "[$2|$cur|$prev][$opts]"

    if [[ ${cur} == * ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _p p
complete -F _p getp


_s() 
{
    local cur prev opts
	if [[ $COMP_CWORD -ne 1 ]]; 
	then
		return 0
	fi
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
	opts="$(echo "$(global -sc  $2)" | tr "\n" " " )"
	#echo "[$2 $cur $prev][$opts]"

    if [[ ${cur} == * ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _s s
complete -F _s gets



_g() 
{
    local cur prev opts
	if [[ $COMP_CWORD -ne 1 ]]; 
	then
		return 0
	fi
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
	opts="$(echo "$(global -gc  "$2")" | tr "\n" " " )"
	#echo "[$2 $cur $prev][$opts]"

    if [[ ${cur} == * ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _g g
complete -F _g getg



#set -o vi
#export PS1="# "
#set editing-mode vi
#set keymap vi
#set convert-meta on
#set bell-style none

cd(){
    dir=$1;
    to_dir="${!dir}"
	vob_dir="${PWD%/mucho*}/${!dir}"
	#echo "${to_dir}, ${vob_dir},  ${dir}, ${!dir}"

    if [[ $# -eq 0 ]]; then
        builtin cd $HOME;    
    elif [[ "$dir" == "-" ]]; then
        builtin cd -
    elif [[ -d ${dir} ]]; then
        builtin cd $dir;
	elif [[ -d ${vob_dir} && -d ${to_dir} ]]; then
		builtin cd $vob_dir
    elif [[ -d ${to_dir} ]]; then
        builtin cd $to_dir;
    elif [[ "${dir}" = "base" ]]; then
        builtin cd  "${!dir}" ;
    else
        builtin cd  "${dir}" ;
    fi ;
    echo -e "[${PWD}]";
    echo -ne "\033]0;${HOST}: ${PWD}\007";
	echo "${PWD}" > ${HOME}/.screen_pwd_${STY#*.}
}

# History search
bind '"\e[A":history-search-backward'
bind '"\e[B":history-search-forward'

#bind '"\t":menu-complete'
bind -m vi-insert "\C-p":dynamic-complete-history
bind -m vi-insert "\C-n":menu-complete
bind -m vi-insert "\C-l":clear-screen
#bind -m vi-insert '" "':menu-complete




stty -ixon

#bind Space:magic-space
#bind '"\e0"':"\"\!:0 \""
#bind '"\e1"':"\"\!:1 \""
#bind '"\e2"':"\"\!:2 \""
#bind '"\e3"':"\"\!:3 \""
#bind '"\e4"':"\"\!:4 \""
#bind '"\e5"':"\"\!:5 \""
#bind '"\e6"':"\"\!:6 \""
##bind '"\e7"':"\"\!:7 \""
##bind '"\e8"':"\"\!:8 \""
#bind '"\e9"':"\"\!:9 \""

bind Space:magic-space
bind '"[11~"':"\"\!:0 \""
bind '"[12~"':"\"\!:1 \""
bind '"[13~"':"\"\!:2 \""
bind '"[14~"':"\"\!:3 \""
bind '"[15~"':"\"\!:4 \""
bind '"[17~"':"\"\!:5 \""
bind '"[18~"':"\"\!:6 \""
bind '"[19~"':"\"\!:7 \""
bind '"[20~"':"\"\!:8 \""
bind '"[21~"':"\"\!:9 \""














bind '"\en"':"\"\""
bind '"\ef"':"\"find  \ei\""
bind '"\em"':"\" -name \"*.[csh]\"\ei\""
bind '"\e\\"':"\"\eA| \ei\""
bind '"\es"':"\"\eA  xgrep  \"\"\ei\""
bind '"\eg"':"\"\eA  grep \"\"\ei \""

#ALT +X xgrep
bind -m vi-command '"\ex"':"\"\eA xgrep  \"\"\ei\""
bind -m vi-insert  '"\ex"':"\"\eA xgrep  \"\"\ei\""

bind  -m vi-command '"[4~"':vi-append-eol # END KEY
bind  -m vi-command '"[1~"':vi-insert-beg # HOME KEY
bind  -m vi-command '"[3~"':vi-delete # DELETE
bind  -m vi-command '"[2~"':vi-insertion-mode # INSERT KEY
bind  -m vi-command '""':backward-delete-char
bind  -m vi-command '""':backward-delete-char

bind  -m vi-insert '"[4~"':vi-append-eol
bind  -m vi-insert '"[1~"':vi-insert-beg
bind  -m vi-insert '"[3~"':vi-delete
bind  -m vi-insert '"[2~"':vi-insertion-mode
bind  -m vi-insert '""':backward-delete-char

bind -m vi-command '"\ek"':"\"kA\""
bind -m vi-insert  '"\ek"':"\"\ekA\""
bind -m vi-command '"\ej"':"\"jA\""
bind -m vi-insert  '"\ej"':"\"\ejA\""

#ALT + BACKSPACE
bind -m vi-command '"\e"':backward-kill-word
bind -m vi-insert  '"\e"':backward-kill-word
bind -m vi-command '"\e"':backward-kill-word
bind -m vi-insert  '"\e"':backward-kill-word

# ALT + DELELTE
bind -m vi-command '"\e[3~"':kill-word
bind -m vi-insert  '"\e[3~"':kill-word

# ALT + SEARCH(. and ,)
bind -m vi-command '"\e."':forward-word
bind -m vi-insert  '"\e."':forward-word
bind -m vi-command '"\e,"':backward-word
bind -m vi-insert  '"\e,"':backward-word

# ALT + MOVE cursor (h,l)
bind -m vi-command '"\eh"':"\"h\""
bind -m vi-insert  '"\eh"':"\"\ei\""
bind -m vi-command '"\el"':"\"l\""
bind -m vi-insert  '"\el"':"\"\eli\""

# ALT + MOVE word (r,f)
bind -m vi-command '"\er"':backward-word
bind -m vi-insert  '"\er"':backward-word
bind -m vi-command '"\et"':forward-word
bind -m vi-insert  '"\et"':forward-word

# ALT + MOVE cursor(end,beg)
bind -m vi-command '"\ee"':vi-append-eol
bind -m vi-insert  '"\ee"':vi-append-eol
bind -m vi-command '"\eb"':vi-insert-beg
bind -m vi-insert  '"\eb"':vi-insert-beg

#Alt + arrow
bind -m vi-insert   '"\e\e[C"':forward-word
bind -m vi-command  '"\e\e[C"':forward-word
bind -m vi-insert   '"\e\e[D"':backward-word
bind -m vi-command  '"\e\e[D"':backward-word

# Alt + D - delete a word
bind -m vi-command '"\ed"':"\"dwi\""
bind -m vi-insert  '"\ed"':"\"\eldwi\""

# Alt + X - delete a char
#bind -m vi-command '"\ex"':"\"\exi\""
#bind -m vi-insert  '"\ex"':"\"\exi\""

# Alt + / -  search
bind -m vi-command '"\e/"':"\"\e/\""
bind -m vi-insert  '"\e/"':"\"\e/\""


# Alt + / -  ../
bind -m vi-command '"\e;"':"\"../\""
bind -m vi-insert  '"\e;"':"\"../\""

# Alt + T - telnet
#bind -m vi-command '"\et"':"\"itelnet \""
#bind -m vi-insert  '"\et"':"\"telnet \""

# Alt + I - IP
#bind -m vi-command '"\eo"':"\"i10.37.73.1\""
#bind -m vi-insert  '"\eo"':"\"10.37.73.1\""


#ALT + *
bind '"\e7"':"\"\&\""
bind '"\e8"':"\"\*\""


#ALT + k
bind -m vi-command '"\ek"':history-search-backward
bind -m vi-insert  '"\ek"':history-search-backward

#ALT + j
bind -m vi-command '"\ej"':history-search-forward
bind -m vi-insert  '"\ej"':history-search-forward


#ALT + p 
bind -m vi-command '"\ei"':paste-from-clpboard
bind -m vi-insert  '"\ei"':paste-from-clpboard



#set echo-control-characters off
#set show-all-if-ambiguous on



function cgrep(){
    if  [[ -n $1  && -n $2 ]]; then  find $2 -name "*.c" |xargs grep -sE --color $1 ; return ;fi
    if  [[ -n $1  ]] ; then   find . -name "*.c" |xargs grep -sE --color $1 ; return ; fi
}
function hgrep(){
    if  [[ -n $1  && -n $2 ]]; then  find $2 -name "*.h" |xargs grep -sE --color $1 ; return ; fi
    if  [[ -n $1  ]] ; then   find . -name "*.h" |xargs grep -sE --color $1 ; return ; fi
}
function chgrep(){
    if  [[ -n $1  && -n $2 ]]; then  find $2 -name "*.[hc]" |xargs grep -sE --color $1 ; return ; fi
    if  [[ -n $1  ]] ; then   find . -name "*.[hc]" |xargs grep -sE --color $1 ; return ; fi
}

function cgrepi(){
    if  [[ -n $1  && -n $2 ]]; then  find $2 -name "*.c" |xargs grep -sE --color -i $1 ; return ;fi
    if  [[ -n $1  ]] ; then   find . -name "*.c" |xargs grep -sE --color -i $1 ; return ; fi
}
function hgrepi(){
    if  [[ -n $1  && -n $2 ]]; then  find $2 -name "*.h" |xargs grep -sE --color -i $1 ; return ; fi
    if  [[ -n $1  ]] ; then   find . -name "*.h" |xargs grep -sE --color -i $1 ; return ; fi
}
function chgrepi(){
    if  [[ -n $1  && -n $2 ]]; then  find $2 -name "*.[hc]" |xargs grep -sE --color -i $1 ; return ; fi
    if  [[ -n $1  ]] ; then   find . -name "*.[hc]" |xargs grep -sE --color -i $1 ; return ; fi
}


if [ ! -f "/bin/bash" ]; then
    export SHELL=~/utils/bin/bash
fi
export EDITOR=vim
export PROMPT_COMMAND=""
export PROMPT_COMMAND="$PROMPT_COMMAND history -a "
export HISTFILESIZE=9999999999 # the bash history should save 3000 commands
export HISTSIZE=99999999999

export HISTIGNORE="pwd:ls:dir"
#export HISTCONTROL=ignorespace:erasedups
export HISTCONTROL=erasedups
export HISTFILE=~/.bash_history
#export HISTTIMEFORMAT='%F %T '
export HISTTIMEFORMAT=' '
shopt -s histappend
shopt -s cmdhist
shopt -s expand_aliases

#Set up history size unlimited
#unset HISTSIZE 
#unset HISTFILESIZE
shopt -s histappend

#shopt -s failglob 
#shopt -s nullglob
#shopt -s direxpand


# Define a few Color's
BLACK='\e[0;30m'
BLUE='\e[0;34m'
GREEN='\e[0;32m'
CYAN='\e[0;36m'
RED='\e[0;31m'
PURPLE='\e[0;35m'
BROWN='\e[0;33m'
LIGHTGRAY='\e[0;37m'
DARKGRAY='\e[1;30m'
LIGHTBLUE='\e[1;34m'
LIGHTGREEN='\e[1;32m'
LIGHTCYAN='\e[1;36m'
LIGHTRED='\e[1;31m'
LIGHTPURPLE='\e[1;35m'
YELLOW='\e[1;33m'
WHITE='\e[1;37m'
NC='\e[0m'              # No Color

_kals() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
	opts="-type -time -list"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _kals kals

_expand() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
	opts=$(/bin/ls)

	COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
	return 0
}
#complete -F _expand ls


function ps1() 
{
    export PS1="[\`pwd\`]" 
}


#set -o vi
#set editing-mode vi
#set keymap vi
#set convert-meta on
#set bell-style none
#set echo-control-characters off
#set show-all-if-ambiguous on
#single tab completion
#set show-all-if-ambiguous on
#set completion-query-items 3500
#set completion-ignore-case on

#default permision
#umask 0000 
umask 0022


rm -rf  ~/.vim/tmp/*

## turn off linewrap
#printf %b '\033[?7l'

## turn on linewrap
 #printf %b '\033[?7h'

#or using tput:

## turn off linewrap
#tput smam

## turn on linewrap
#tput rmam



#show rows and columns
	#tput cols
	#tput lines

#change
	#stty rows 44
	#stty cols 200



#echo -ne "\033[30;47m\033[2J\033[1;1H";
#alias ls='ls --color'
#LS_COLORS='di=38;5;33:fi=38;5;124:ln=38;5;127:pi=33:so=35:bd=36:cd=37:or=37:mi=30:ex=32:*.rpm=90'
#export LS_COLORS
#Rashmi LA_COLOR 4
#LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.axa=01;36:*.oga=01;36:*.spx=01;36:*.xspf=01;36::di=5;35;42:'
#The first line makes ls use the --color parameter by default, which tells ls to display files in different colours based on the setting of the LS_COLORS variable.

#The second line is the tricky one, and what I have worked out so far has been by trial and error.  The parameters (di, fi, etc.) refer to different Linux file types. I have worked them out as shown

#di = directory
#fi = file
#ln = symbolic link
#pi = fifo file
#so = socket file
#bd = block (buffered) special file
#cd = character (unbuffered) special file
#or = symbolic link pointing to a non-existent file (orphan)
#mi = non-existent file pointed to by a symbolic link (visible when you type ls -l)
#ex = file which is executable (ie. has 'x' set in permissions). ex = file which is executable (ie. has 'x' set in permissions).







# Alter the following to reflect the location of this file.
#if [[ ! -f /etc/bash_completion ]]; then
	#export BASH_COMPLETION=~/.bash_completion
	#export BASH_COMPLETION_DIR=~/.bash_completion.d
	#export BASH_COMPLETION_COMPAT_DIR=~/.bash_completion.d
	#. ~/.bash_completion
#fi

export PYTHONPATH=${HOME}/utils/lib/python2.7/site-packages


function cwd()
{
	return "$(pwd)"
}
echo "${PWD}" > ${HOME}/.screen_pwd_${STY#*.}


#touch ~/.bashrc_custom_profile_user
#touch ~/.custom_vimrc
#. ~/.bashrc_custom_profile_user_pn
. ~/.bashrc_custom_profile_user_fnc
. ~/.bashrc_custom_profile_user

